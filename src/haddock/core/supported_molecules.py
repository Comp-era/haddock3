"""
HADDOCK 3 supported residues.

https://bianca.science.uu.nl/haddock2.4/library
"""
import itertools as it
import re
from collections import namedtuple
from functools import partial
from pathlib import Path

from haddock import PrePath, toppar_path
from haddock.libs.libutil import transform_to_list


def read_supported_residues_from_top_file(topfile, regex, Residue):
    """
    Read residue from CNS topology file.

    Generic implementation.

    Parameters
    ----------
    topfile : str or pathlib.Path
        The path pointing to the HADDOCK `.top` file.

    regex : raw string
        The regex string to find the desired groups.

    Residue : namedtuple
        A named tuple that accepts arguments matching the groups
        generated by `re.findall(regex, topfile)`.
        For the implementation in this module we expect this Residue
        namedtuple has a `resname` and `name` parameters, though it is
        not mandatory.

    Returns
    -------
    tuple
        A tuple of Residue named tuples.
    """
    text = Path(topfile).read_text()
    groups = re.findall(regex, text)
    # transform_to_list is needed because some regex may return groups
    # of just one members, hence the `for g in groups` returns a string
    # instead of a list.
    residues = tuple(Residue(*transform_to_list(g)) for g in groups)
    return residues


read_top = partial(partial, read_supported_residues_from_top_file)


# what we will need to inspect if the residues are allowed or not are
# the residue names. So it is nice to have a function that retrieve them
# from the respective named tuples.
def get_resnames(group):
    """Make a tuple with the "resnames"."""
    return {i.resname: i for i in group}


TopparPath = PrePath(toppar_path)

# The regular expressions that capture the resnames, names, and other relavante
# information from the `.top` files
header_1_regex = r"\nRESIdue +(\w{1,3}) +!([a-zA-Z0-9-,]+) *.*\n"
header_2_regex = r"\nRESIdue (\w{1,3}) *.*\n"
header_3_regex = r"\n! *(\w+) *.*\nRESIdue +(\w{1,3}).*\n"
header_4_regex = r"\nRESIdue (\w{1,4}) {(\w+) [\+|\-]?\d.*}\n.*\n *ATOM (\w{1,2}[\+|\-]?\d) .* CHARge=([-\+]?\d).*\nEND {([A-Z]{1,2}).*}\n"  # noqa: E501
header_5_regex = r"\nRESIdue (\w{1,4}) {(\w+)}\n  GROUP\n(?:    ATOM.*\n)+\n(?:  BOND.*\n)+\nEND.*\n"  # noqa: E501
header_6_regex = r"\nresidue ([A-Z0-9]{1,3}).*\n"
header_7_regex = r"\nRESIdue ([A-Z0-9]{1,4}).*{\*? (.*) \*?}\n"

# The namedtuples for each type of residue.
carbo_resi = namedtuple("Carbo", ["resname", "name"])
dnarna_resi = namedtuple("DNARNABase", ["resname", "name"])
dnarna2_resi = namedtuple("DNARNABase", ["resname"])
fragment_resi = namedtuple("FramentProbe", ["name", "resname"])
glycansuu_resi = namedtuple("GlycanUU", ["resname", "name"])
heme_resi = namedtuple("Heme", ["resname", "name"])
ion_resi = namedtuple("Ion", ["resname", "name", "atom", "charge", "element"])
multiatom_ion_resi = namedtuple("MultiatomIon", ["resname", "name"])
protein_resi = namedtuple("AminoAcid", ["resname"])
solvent_resi = namedtuple("Solvent", ["resname", "name"])

# functions here are defined by order of `ls` in `cns/toppar/*.top`
# functions ready to read a specific `.top` file.
read_carbohydrate = read_top(regex=header_1_regex, Residue=carbo_resi)
read_dna_rna_allatom = read_top(regex=header_1_regex, Residue=dnarna_resi)
read_dna_rna_martini = read_top(regex=header_2_regex, Residue=dnarna2_resi)
read_fragment = read_top(regex=header_3_regex, Residue=fragment_resi)
read_glycansuu = read_top(regex=header_1_regex, Residue=glycansuu_resi)
read_hemes = read_top(regex=header_1_regex, Residue=heme_resi)
read_ions = read_top(regex=header_4_regex, Residue=ion_resi)
read_multiatom_ions = read_top(regex=header_5_regex, Residue=multiatom_ion_resi)
read_protein_1 = read_top(regex=header_6_regex, Residue=protein_resi)
read_protein_2 = read_top(regex=header_2_regex, Residue=protein_resi)
read_solvent = read_top(regex=header_7_regex, Residue=solvent_resi)

# paths to the `.top` files
carbo_top = TopparPath("carbohydrate.top")
dna_rna_all_top = TopparPath("dna-rna-allatom-hj-opls-1.3.top")
dna_rna_martini_top = TopparPath("dna-rna-CG-MARTINI-2-1p.top")
fragment_top = TopparPath("fragment_probes.top")
glycansuu_top = TopparPath("glycans-uu.top")
hemes_top = TopparPath("hemes-allhdg.top")
ions_top = TopparPath("ion.top")
protein_5_4_caro_top = TopparPath("protein-allhdg5-4-caro.top")
protein_5_4_top = TopparPath("protein-allhdg5-4.top")
protein_martini_2_top = TopparPath("protein-CG-Martini-2-2.top")
protein_martini_top = TopparPath("protein-CG-Martini.top")
solvent_top = TopparPath("solvent-allhdg5-4.top")

# supported Residues (tuple of namedtuples)
supported_carbohydrates = read_carbohydrate(carbo_top)
supported_nucleic = set(it.chain(
    read_dna_rna_allatom(dna_rna_all_top),
    read_dna_rna_martini(dna_rna_martini_top),
    ))
# supported_dna_rna_allatom = read_dna_rna_allatom(dna_rna_all_top)
# supported_dna_rna_martini = read_dna_rna_martini(dna_rna_martini_top)
supported_fragments = read_fragment(fragment_top)
supported_glycansuu = read_glycansuu(glycansuu_top)
supported_hemes = read_hemes(hemes_top)
supported_ions = read_ions(ions_top)
supported_multiatom_ions = read_multiatom_ions(ions_top)
supported_aminoacids = set(it.chain(
    read_protein_1(protein_5_4_caro_top),
    read_protein_1(protein_5_4_top),
    read_protein_2(protein_martini_2_top),
    read_protein_2(protein_martini_top),
    ))
supported_solvents = read_solvent(solvent_top)

# supported resnames
supported_carbo_resnames = get_resnames(supported_carbohydrates)
supported_nucleic_resnames = get_resnames(supported_nucleic)
# supported_dna_rna_allatom_resnames = get_resnames(supported_dna_rna_allatom)
# supported_dna_rna_martini_resnames = get_resnames(supported_dna_rna_martini)
supported_fragments_resnames = get_resnames(supported_fragments)
supported_glycansuu_resnames = get_resnames(supported_glycansuu)
supported_hemes_resnames = get_resnames(supported_hemes)
supported_ions_resnames = {ion.resname: ion for ion in supported_ions}
supported_multiatom_ions_resnames = get_resnames(supported_multiatom_ions)
supported_aminoacids_resnames = get_resnames(supported_aminoacids)
supported_solvents_resnames = get_resnames(supported_solvents)

# other attributes
supported_ions_elements = {ion.element: ion for ion in supported_ions}
supported_ions_atoms = {ion.atom: ion for ion in supported_ions}

#
# Residues that must be set as ATOM
supported_ATOM = set(it.chain(
    supported_nucleic_resnames,
    supported_aminoacids_resnames,
    ))

# Residues that must be set as HETATM
supported_HETATM = set(it.chain(
    supported_carbo_resnames,
    supported_fragments_resnames,
    supported_glycansuu_resnames,
    supported_hemes_resnames,
    supported_ions_resnames,
    supported_multiatom_ions_resnames,
    supported_solvents_resnames,
    ))

print(supported_ions_resnames.keys())
